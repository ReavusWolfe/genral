<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ReavusWolfe.Domain\bin\$(ConfigurationName)\ReavusWolfe.Domain.dll" #>

<#@ assembly name="$(SolutionDir)ReavusWolfe.Domain\bin\$(ConfigurationName)\EntityFramework.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

// ReSharper disable RedundantNameQualifier
// ReSharper disable UnusedMember.Global
// ReSharper disable InconsistentNaming

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Threading;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace ReavusWolfe.Domain.DAL
{ 
	/// <summary>
    ///  Wraps the entity framework data context for applicative use.
    /// </summary>
    public interface IEntityContext : IDisposable
    {
		<#
			var types = typeof(ReavusWolfe.Domain.EntityModel).GetProperties().Where(t=>t.Name.ToString() != "Database" && t.Name.ToString() != "ChangeTracker" && t.Name.ToString() != "Configuration");
			foreach(var t in types){ 
			#> 
				<#= t.PropertyType.ToString().Replace(@"`1","").Replace("[","<").Replace("]",">").Replace("System.Data.Entity.","") #> <#= t.Name #> { get; set; }
			<#
			}
		#>
		bool IsCompatibleWithModel(bool throwIfNoMetadata);             
        void DisableProxyCreation();
        void DisableLazyLoading();
        int SaveChanges();
		Task<int> SaveChangesAsync();
        DbEntityEntry Entry<TEntity>(TEntity entity) where TEntity : class;
		string GetConnectionString();
    }

    public class EntityContext : IEntityContext
	{
		private readonly EntityModel _db;

		public EntityContext(EntityModel db){
		_db = db;
			DisableLazyLoading();
		}
<#
		
		foreach(var t in types){
			#>
			public <#= t.PropertyType.ToString().Replace(@"`1","").Replace("[","<").Replace("]",">").Replace("System.Data.Entity.","") #> <#= t.Name #> { get { return _db.<#= t.Name #>;}  set { throw new InvalidOperationException();} }
			<#
		}
#>
public void ExecuteSql(string sql){
_db.Database.ExecuteSqlCommand(sql);
}
public string GetConnectionString(){
return _db.Database.Connection.ConnectionString;
}
		public void DisableProxyCreation()
        {
            _db.Configuration.ProxyCreationEnabled = false;
        }
		public bool IsCompatibleWithModel(bool throwIfNoMetadata)
        {
            return _db.Database.CompatibleWithModel(throwIfNoMetadata);
        }
		public void DisableLazyLoading()
        {
            _db.Configuration.LazyLoadingEnabled = false;
        }
        public int SaveChanges()
        {
            return _db.SaveChanges();
        }
		public Task<int> SaveChangesAsync()
        {
            return _db.SaveChangesAsync();
        }
        public DbEntityEntry Entry<TEntity>(TEntity entity) where TEntity : class
        {
            return _db.Entry(entity);
        }

        public void Dispose()
        {
            _db.Dispose();
        }
	}


	public class FakeEntityContext : IEntityContext
	{
		private static HashSet<object> _entities = new HashSet<object>();
<#
		foreach(var t in types){			
			#>
				public <#= t.PropertyType.ToString().Replace(@"`1","").Replace("[","<").Replace("]",">").Replace("System.Data.Entity.","") #> <#= t.Name #> { get; set; } = new TestDbSet<<#= t.PropertyType.ToString().Replace(@"`1","").Replace("[","<").Replace("]",">").Replace("System.Data.Entity.DbSet<","").Replace(">","") #>>();
			<#
			
		}

#>
		public bool IsCompatibleWithModel(bool throwIfNoMetadata)
        {
            return true;
        }
		public void DisableProxyCreation()
        {
            // do nothing
        }
		public void DisableLazyLoading()
        {
            // do nothing
        }
		public Task<int> SaveChangesAsync()
        {
            SaveChangesCount++;
		    return Task.Run(() => 0);
        }
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges() 
        { 
            this.SaveChangesCount++; 
            return 1; 
        } 
        public DbEntityEntry Entry<TEntity>(TEntity entity) where TEntity : class
        {
            return null;
        }

        public void Dispose()
        {
            
        }

		public string GetConnectionString(){
			return string.Empty;
		}
	}

	public class TestDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        ObservableCollection<TEntity> _data; 
        IQueryable _query; 
 
        public TestDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        } 
 
        public override TEntity Add(TEntity item) 
        { 
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        { 
            _data.Remove(item); 
            return item; 
        } 
		
		public override IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities)
	    {
	        foreach (var entity in entities)
	        {
	            _data.Remove(entity);
	        }
            return entities;
	    }

        public override TEntity Attach(TEntity item) 
        { 
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new TestDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new TestDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        } 
    } 
 
    internal class TestDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        internal TestDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new TestDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new TestDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return Task.FromResult(Execute(expression)); 
        } 
 
        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    internal class TestDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public TestDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public TestDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new TestDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new TestDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    internal class TestDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public TestDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    } 
}
